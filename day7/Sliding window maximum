class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int n=nums.length;
        int[] ans=new int[n-k+1];
        for(int i=0;i<=n-k;i++){
            int sum=Integer.MIN_VALUE;;
            for(int j=i;j<i+k;j++){
                sum=Math.max(sum,nums[j]);

            }
            
            ans[i]=sum;
            
        }
        return  ans;
        
    }
}




class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
          Deque<Integer> dq=new ArrayDeque();
          ArrayList<Integer> ans=new ArrayList();
          for(int i=0; i<k; i++){
            while(!dq.isEmpty() && nums[i] >= nums[dq.peekLast()]) {
                dq.removeLast();
            }
            dq.addLast(i);
        }
        ans.add(nums[dq.peekFirst()]);
        for(int i=k; i<nums.length; i++) {
            if(!dq.isEmpty() && i-dq.peekFirst() >= k) {
                dq.removeFirst();
            }
            while(!dq.isEmpty() && nums[i] >= nums[dq.peekLast()]) {
                dq.removeLast();
            }
            dq.addLast(i);
            ans.add(nums[dq.peekFirst()]);
        }
        int[] arr=new int[ans.size()];
        for (int i = 0; i < ans.size(); i++)
            arr[i] = ans.get(i);
        return arr;
    }
}
        
